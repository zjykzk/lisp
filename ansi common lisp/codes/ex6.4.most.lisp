(defun our-most (fn lst)
	(case (length lst)
		(0 (values nil nil))
		(1 (values (car lst) nil))
		(2 (values (car lst) (second lst)))
		(t 
			(let* ((win1 (first lst))
						 (win2 (second lst))
						 (max1 (funcall fn win1))
						 (max2 (funcall fn win2)))
				(if (> max2 max1)
					(progn (rotatef max1 max2)
								 (rotatef win1 win2)
								 (format t "~A ~A %" max1 max2)))
				(dolist (obj (cdr (cdr lst)))
					(format t "~A ~A %" max1 max2)
					(let ((score (funcall fn obj)))
						(if (> score max2)
							(progn (setf max2 score)
										 (setf win2 obj)))
						(if (> max2 max1)
							(progn (rotatef max1 max2)
										 (rotatef win1 win2)))))
				(values max1 max2)))))
